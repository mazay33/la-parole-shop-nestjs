generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//USER ========================================================================================
enum Provider {
  GOOGLE
  YANDEX
}

model User {
  id        String    @id @default(uuid())
  email     String    @unique
  password  String?
  roles     Role[]
  provider  Provider?
  tokens    Token[]
  profile   Profile?
  cart      Cart?
  wishlist  Wishlist?
  addresses Address[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("users")
}

model Token {
  token     String   @unique
  exp       DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  userAgent String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tokens")
}

model Profile {
  id        Int      @id @default(autoincrement())
  firstName String?
  lastName  String?
  phone     String?  @unique
  birthday  String?
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("profile")
}

model Address {
  id           Int      @id @default(autoincrement())
  title        String
  addressLine1 String
  addressLine2 String?
  country      String
  city         String
  postalCode   String
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("addresses")
}

//CART ========================================================================================

model Cart {
  id           Int           @id @default(autoincrement())
  user         User          @relation(fields: [userId], references: [id])
  userId       String        @unique
  cartProducts CartProduct[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@map("cart")
}

model CartProduct {
  id                     Int                   @id @default(autoincrement())
  cart                   Cart                  @relation(fields: [cartId], references: [userId])
  cartId                 String
  product                Product               @relation(fields: [productId], references: [id])
  productId              Int
  quantity               Int
  productConfiguration   ProductConfiguration? @relation(fields: [productConfigurationId], references: [id])
  productConfigurationId Int?
  cupSize                CupSize?              @relation(fields: [cupSizeId], references: [id])
  clothingSize           ClothingSize?         @relation(fields: [clothingSizeId], references: [id])
  beltSize               BeltSize?             @relation(fields: [beltSizeId], references: [id])
  cupSizeId              Int?
  clothingSizeId         Int?
  beltSizeId             Int?
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt

  @@unique([cartId, productId, productConfigurationId, clothingSizeId, cupSizeId, beltSizeId], name: "UniqueCartItem")
  @@map("cart_products")
}

//WISHLIST ========================================================================================

model Wishlist {
  id               Int               @id @default(autoincrement())
  user             User              @relation(fields: [userId], references: [id])
  userId           String            @unique
  wishlistProducts WishlistProduct[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  @@map("wishlist")
}

model WishlistProduct {
  id         Int      @id @default(autoincrement())
  wishlist   Wishlist @relation(fields: [wishlistId], references: [userId])
  wishlistId String
  product    Product  @relation(fields: [productId], references: [id])
  productId  Int
  count      Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([wishlistId, productId], name: "UniqueWishlistItem")
  @@map("wishlist_products")
}

//PRODUCT ========================================================================================

model Product {
  id                    Int                    @id @unique @default(autoincrement())
  name                  String
  images                ProductImage[]
  sku                   String                 @unique
  price                 Float
  discount              Float                  @default(0)
  stock                 Int                    @default(0)
  isAvailable           Boolean                @default(false)
  cartItems             CartProduct[]
  wishlistItems         WishlistProduct[]
  category              Category               @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId            Int
  subCategories         SubCategory[]
  info                  ProductInfo[]
  productConfigurations ProductConfiguration[]
  cupSizes              CupSize[]
  clothingSizes         ClothingSize[]
  beltSizes             BeltSize[]
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt

  @@map("products")
}

model ProductImage {
  id        Int      @id @unique @default(autoincrement())
  url       String
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("product_images")
}

model CupSize {
  id          Int           @id @default(autoincrement())
  size        String
  products    Product[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  CartProduct CartProduct[]

  @@map("cup_sizes")
}

model ClothingSize {
  id          Int           @id @default(autoincrement())
  size        String
  products    Product[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  CartProduct CartProduct[]

  @@map("clothing_sizes")
}

model BeltSize {
  id          Int           @id @default(autoincrement())
  size        String
  products    Product[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  CartProduct CartProduct[]

  @@map("belt_sizes")
}

model ProductConfiguration {
  id           Int           @id @unique @default(autoincrement())
  product      Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId    Int
  sku          String        @unique
  price        Float
  name         String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  cartProducts CartProduct[]

  @@map("product_configurations")
}

model ProductInfo {
  id          Int    @id @unique @default(autoincrement())
  title       String
  description String

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int     @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("product_info")
}

model Category {
  id          Int     @id @default(autoincrement())
  name        String
  description String?

  products      Product[]
  subCategories SubCategory[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("categories")
}

model SubCategory {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId  Int

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Product   Product[]

  @@map("sub_categories")
}

enum Role {
  USER
  ADMIN
  EMPLOYEE
}
